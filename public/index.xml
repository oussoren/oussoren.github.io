<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Max Oussoren</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Max Oussoren</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>about</title>
      <link>http://localhost:1313/about/about/</link>
      <pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/about/</guid>
      <description>&lt;h2 id=&#34;about&#34;&gt;about&lt;/h2&gt;&#xA;&lt;p&gt;My name is Max&lt;/p&gt;</description>
    </item>
    <item>
      <title>CS 106/61A Notes</title>
      <link>http://localhost:1313/posts/cs-61a-notes/</link>
      <pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/cs-61a-notes/</guid>
      <description>&lt;h1 id=&#34;lecture-notes&#34;&gt;Lecture notes&lt;/h1&gt;&#xA;&lt;p&gt;Here I will ramble about my brief course in introductory CS :)&lt;/p&gt;&#xA;&lt;h2 id=&#34;week-1&#34;&gt;Week 1&lt;/h2&gt;&#xA;&lt;h3 id=&#34;broad-basics-of-computer-science&#34;&gt;Broad Basics of Computer Science:&lt;/h3&gt;&#xA;&lt;p&gt;A computer program is a collection of code for the computer to run.&#xA;The code in a program is divided into smaller, logical units of code called functions,&#xA;much as all the words that make up an essay are divided into logical paragraphs.&lt;/p&gt;&#xA;&lt;h3 id=&#34;python-syntax&#34;&gt;Python Syntax:&lt;/h3&gt;&#xA;&lt;p&gt;In python functions are made by writing def function_name (parameter1, parameter2,&amp;hellip; parameter n).&#xA;The function is called by writing function_name(parameters).&lt;/p&gt;</description>
    </item>
    <item>
      <title>CS 106B Notes</title>
      <link>http://localhost:1313/posts/cs-106b/</link>
      <pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/cs-106b/</guid>
      <description>&lt;h1 id=&#34;cs-106b-programming-abstractions&#34;&gt;CS 106B: Programming Abstractions&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;Here are my notes for cs106b!!!&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;c-fundamentals&#34;&gt;C++ Fundamentals&lt;/h1&gt;&#xA;&lt;h2 id=&#34;core-programming-concepts&#34;&gt;Core Programming Concepts&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-syntax-vs-semantics&#34;&gt;1. Syntax vs Semantics&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Syntax&lt;/strong&gt;: The formal rules and structure for writing valid code in a programming language&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Semantics&lt;/strong&gt;: The actual meaning and behavior of the code&lt;/li&gt;&#xA;&lt;li&gt;Example: Just like in natural language where grammar rules are syntax and meaning is semantics, in programming:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Syntax: proper declaration with type, variable name, equals sign, value, semicolon&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;// Semantics: Creates space in memory to store an integer and assigns it the value 5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-compilation-vs-interpretation&#34;&gt;2. Compilation vs Interpretation&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;C++ is a compiled language, unlike interpreted languages like Python&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Compilation Process&lt;/strong&gt;:&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Source code is processed by compiler&lt;/li&gt;&#xA;&lt;li&gt;Compiler creates executable program&lt;/li&gt;&#xA;&lt;li&gt;Program can then be run separately&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Key Difference&lt;/strong&gt;: Compilation checks entire program before execution, while interpretation executes code line-by-line&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-comments-in-c&#34;&gt;3. Comments in C++&lt;/h3&gt;&#xA;&lt;p&gt;Two distinct types:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linear Algebra Notes</title>
      <link>http://localhost:1313/posts/linear-algebra-notes/</link>
      <pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/linear-algebra-notes/</guid>
      <description>&lt;h1 id=&#34;chapter-notes&#34;&gt;Chapter Notes&lt;/h1&gt;&#xA;&lt;h3 id=&#34;quick-overview&#34;&gt;Quick Overview&lt;/h3&gt;&#xA;&lt;p&gt;Given that this is linear algebra, I will be focusing on linear subspaces, which can be defined as the span, or the&#xA;amount of space covered by, a finite collection of vectors. These subspaces will lie in $\mathbf{R}^n$, or the space of&#xA;all n-dimensional vectors(with n coordinates). Linear subspaces will be represented by $\mathsf{V}$. The n-tuples of&#xA;vectors which define these subspaces will be represented by the following:&#xA;$\vec{v}_n=\begin{bmatrix}&#xA;\vec{v}_1 \\&#xA;\vdots \\&#xA;\vec{v}_n&#xA;\end{bmatrix}$&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
