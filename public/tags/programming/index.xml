<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Max Oussoren</title>
    <link>https://example.org/tags/programming/</link>
    <description>Recent content in Programming on Max Oussoren</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Aug 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://example.org/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Poker Bot Project</title>
      <link>https://example.org/posts/poker-bot-project/</link>
      <pubDate>Thu, 14 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://example.org/posts/poker-bot-project/</guid>
      <description>&lt;h1 id=&#34;poker-bot&#34;&gt;Poker Bot&lt;/h1&gt;&#xA;&lt;p&gt;Built an Object-Oriented Poker Environment that tracks everything from player action history to hand strength and runs smoothly in all three standard rulesets. Created standard bots of all playstyles(from loose and aggressive to tight and defensive) based off of standard heuristics. Currently working on implementing a ML Entity to be trained off of public player action history and a collection of game data from professional poker matches.&lt;/p&gt;&#xA;&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Hand Evaluation&lt;/strong&gt;: Accurately ranks poker hands from high card to royal flush&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pot Odds Calculation&lt;/strong&gt;: Determines the mathematical probability of winning&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Betting Strategy&lt;/strong&gt;: Makes optimal betting decisions based on game theory&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;User Interface&lt;/strong&gt;: Clean Qt-based interface for interaction&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;technical-details&#34;&gt;Technical Details&lt;/h2&gt;&#xA;&lt;p&gt;The bot is written in C++ for performance and uses the Qt framework for the GUI. The core algorithms handle:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Stock Scraper Project</title>
      <link>https://example.org/posts/stock-scraper-project/</link>
      <pubDate>Thu, 14 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://example.org/posts/stock-scraper-project/</guid>
      <description>&lt;h1 id=&#34;stock-info-scraper&#34;&gt;Stock Info Scraper&lt;/h1&gt;&#xA;&lt;p&gt;A Python tool I developed for scraping and analyzing stock market data.&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;I built this project to automate and collect stock information and perform stock analysis to speed up the process of analyzing&#xA;stocks for investment. In future versions I hope to add sector comparisons to provide more valuable information such as&#xA;how the stock is performing relative to the rest of the sector and if it seems to be over/under-valued.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CS 106/61A Notes</title>
      <link>https://example.org/posts/cs-61a-notes/</link>
      <pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/posts/cs-61a-notes/</guid>
      <description>&lt;h1 id=&#34;lecture-notes&#34;&gt;Lecture notes&lt;/h1&gt;&#xA;&lt;p&gt;Here I will ramble about my brief course in introductory CS :)&lt;/p&gt;&#xA;&lt;h2 id=&#34;week-1&#34;&gt;Week 1&lt;/h2&gt;&#xA;&lt;h3 id=&#34;broad-basics-of-computer-science&#34;&gt;Broad Basics of Computer Science:&lt;/h3&gt;&#xA;&lt;p&gt;A computer program is a collection of code for the computer to run.&#xA;The code in a program is divided into smaller, logical units of code called functions,&#xA;much as all the words that make up an essay are divided into logical paragraphs.&lt;/p&gt;&#xA;&lt;h3 id=&#34;python-syntax&#34;&gt;Python Syntax:&lt;/h3&gt;&#xA;&lt;p&gt;In python functions are made by writing def function_name (parameter1, parameter2,&amp;hellip; parameter n).&#xA;The function is called by writing function_name(parameters).&lt;/p&gt;</description>
    </item>
    <item>
      <title>CS 106B Notes</title>
      <link>https://example.org/posts/cs-106b/</link>
      <pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/posts/cs-106b/</guid>
      <description>&lt;h1 id=&#34;cs-106b-programming-abstractions&#34;&gt;CS 106B: Programming Abstractions&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;Here are my notes for cs106b!!!&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;c-fundamentals&#34;&gt;C++ Fundamentals&lt;/h1&gt;&#xA;&lt;h2 id=&#34;core-programming-concepts&#34;&gt;Core Programming Concepts&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-syntax-vs-semantics&#34;&gt;1. Syntax vs Semantics&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Syntax&lt;/strong&gt;: The formal rules and structure for writing valid code in a programming language&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Semantics&lt;/strong&gt;: The actual meaning and behavior of the code&lt;/li&gt;&#xA;&lt;li&gt;Example: Just like in natural language where grammar rules are syntax and meaning is semantics, in programming:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Syntax: proper declaration with type, variable name, equals sign, value, semicolon&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;// Semantics: Creates space in memory to store an integer and assigns it the value 5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-compilation-vs-interpretation&#34;&gt;2. Compilation vs Interpretation&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;C++ is a compiled language, unlike interpreted languages like Python&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Compilation Process&lt;/strong&gt;:&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Source code is processed by compiler&lt;/li&gt;&#xA;&lt;li&gt;Compiler creates executable program&lt;/li&gt;&#xA;&lt;li&gt;Program can then be run separately&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Key Difference&lt;/strong&gt;: Compilation checks entire program before execution, while interpretation executes code line-by-line&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-comments-in-c&#34;&gt;3. Comments in C++&lt;/h3&gt;&#xA;&lt;p&gt;Two distinct types:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linear Algebra Notes</title>
      <link>https://example.org/posts/linear-algebra-notes/</link>
      <pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/posts/linear-algebra-notes/</guid>
      <description>&lt;h1 id=&#34;chapter-notes&#34;&gt;Chapter Notes&lt;/h1&gt;&#xA;&lt;h3 id=&#34;quick-overview&#34;&gt;Quick Overview&lt;/h3&gt;&#xA;&lt;p&gt;Given that this is linear algebra, I will be focusing on linear subspaces, which can be defined as the span, or the&#xA;amount of space covered by, a finite collection of vectors. These subspaces will lie in $\mathbf{R}^n$, or the space of&#xA;all n-dimensional vectors(with n coordinates). Linear subspaces will be represented by $\mathsf{V}$. The n-tuples of&#xA;vectors which define these subspaces will be represented by the following:&#xA;$\vec{v}_n=\begin{bmatrix}&#xA;\vec{v}_1 \\&#xA;\vdots \\&#xA;\vec{v}_n&#xA;\end{bmatrix}$&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
